
/*
 * Author : Jing Liu@ Biophysics and TDB
 * Modified to collective reduce, to C version
 * 2016-10-25 merged to Tomas single GPU verstion
 */
#include <gsl/gsl_rng.h>
#include <time.h>
#include <iostream>
#include <stdio.h>
#ifdef IN_PLACE
#undef IN_PLACE
#undef BOTTOM
#endif
#include <emc.h>
#include <mpi.h>



using namespace std;

#include <string.h>//


void f (int b, Configuration conf,const char* a , char* filename_buffer ){
    sprintf(filename_buffer,"%s/%s/model_%.4d.h5", conf.output_dir,a,b);
}
FILE* create_file_descriptor(Configuration conf, const char * name, const char* mode){
    char filename_buffer[256];
    sprintf(filename_buffer, "%s/%s", conf.output_dir,name);
    
    FILE* file = fopen(filename_buffer, mode);
    if (file ==NULL)
    {
        printf("cannot open file\n\n");
    }
    printf("FILE %d\n",file);
    return file;
}

int main(int argc, char *argv[]){
    
    Configuration conf;
    /*-----------------------------------------------------------Do Master Node Initial Job start------------------------------------------------*/
    cout<<"Init MPI...";
    MPI_Init(&argc, &argv);
    int taskid, ntasks;
    int master = 0;
    MPI_Comm_rank(MPI_COMM_WORLD,&taskid);
    MPI_Comm_size(MPI_COMM_WORLD,&ntasks);
    printf("%d of total %d MPI processes started!\n", taskid,ntasks);
    if (argc > 1) {
        read_configuration_file(argv[1],&conf);
    } else {
        read_configuration_file("./emc.conf",&conf);
    }
    
    char filename_buffer[PATH_MAX];
    f(taskid, conf,"out", filename_buffer);
    printf("%s \n\n", filename_buffer);
    f(taskid+100, conf,"in", filename_buffer);
    printf("%s \n\n", filename_buffer);
    
   
    
    FILE* fl = create_file_descriptor(conf, "ty2.data","wp");
    printf("FILE %d\n",fl);

    fprintf(fl, "%g %g %g %g\n", 1.0,2.0,3.1,4.9);
    fclose(fl);
    MPI_Finalize();

    return 0;
}